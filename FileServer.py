V=24"""TODOTODO LATER3. Mappen kunnen zippen en uploaden4. Knoppen mogen niet aandrukbar zijn"""from tkinter import filedialogimport socket, threading, tkinter as tk, time, os, zipfileAUTOSTART = TruePORT = 7816IP = "192.168.1.2"PATH = "C:/Users/Quinten/Desktop"EOF = b'DONE'PACKET_SIZE = 99999999global datadata = {    "act_as": None,    "state": "None", #None, Connected    "socket": None,    "connection": None,    "eof": False,    "zip": None,    "app": False,    "files": [        'C:/Users/Quinten/Desktop/analyseDrive.ps1',        'C:/Users/Quinten/Desktop/FileServer.py'    ],    "update_file_listbox": False,}class QThread():    def __init__(self, job):        self.oldstate = data["state"]        ###List of all selectable jobs        if job == "server_init":            thread = threading.Thread(target = self.start, args = ["server"])        if job == "client_init":            thread = threading.Thread(target = self.start, args = ["client"])        if job == "GUI":            thread = threading.Thread(target = self.gui_manager)        if job == "send":            thread = threading.Thread(target = self.send)        thread.daemon = True        thread.start()    def start(self, act_as):        data["act_as"] = act_as        server_ip = app.ip_entry.get()        ###Write server-socketinfo to GUI        app.server_socket_ip_label["text"] = server_ip        app.server_socket_port_label["text"] = PORT        ###Make a connection        data["socket"] = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        if act_as == "server":            data["socket"].bind((server_ip,PORT))            data["socket"].listen()            data["connection"], client_address = data["socket"].accept()            ###Write client-socketinfo to GUI on the server side            app.client_socket_ip_label["text"] = client_address[0]            app.client_socket_port_label["text"] = client_address[1]        else:            data["socket"].connect((server_ip, PORT))            ###Write client-socketinfo to GUI on the client side            app.client_socket_ip_label["text"] = data["socket"].getsockname()[0]            app.client_socket_port_label["text"] = data["socket"].getsockname()[1]        data["state"] = "Connected"                counting = False        bytes_received = 0        packet_count = 0        max_packet_received = 0        max_speed = 0                file = open("files/FileServer_%s-%s.py" %(act_as, time.strftime("%H-%M-%S-%d-%m")), "ab+")        while True:            if act_as == "server":                message = data["connection"].recv(PACKET_SIZE)            else:                message = data["socket"].recv(PACKET_SIZE)                        if not counting:                counting = True                start = time.time()                            bytes_received += len(message)            packet_count += 1            if message != b"DONE":                print("%s%s | %ss | %s/%skB | %skB/s | %skB | %skB/s"                  %((                    act_as[0].upper(),                    str(packet_count).ljust(5),                    str(int(time.time() - start)).rjust(5),                    str(int(len(message)/1000)).rjust(5),                    str(int((bytes_received / 1000))).ljust(8),                    str(int((bytes_received / 1000) / (time.time() - start + 0.1))).rjust(5),                    str(int(max_packet_received / 1000)).rjust(5),                    str(int(max_speed)).rjust(5),                )))            else:                time.sleep(1)                print("\n\n" + "-" * 20 + " DONE " + "-" * 20)                        if len(message) > max_packet_received:                max_packet_received = len(message)            if ((bytes_received / 1000) / (time.time() - start + 0.1)) > max_speed:                max_speed = ((bytes_received / 1000) / (time.time() - start + 0.1))                        if message[-len(EOF):] == EOF:                data["eof"] = True                file.write(message[:-len(EOF)])                file.close()            else:                file.write(message)                def send(self):        if len(data["files"]) == 1 and os.path.isfile(data["files"][0]):            app.status('Sending files')            with open(data["files"][0], 'rb') as file:                if data["act_as"] == "server":                    data["connection"].sendfile(file)                else:                    data["socket"].sendfile(file)                                data["connection"].send("DONE".encode())            app.status('Files are sent')                    elif len(data["files"]) == 0:            print('no files')                    elif os.path.isdir(data["files"][0]) or len(data["files"]) > 1:            filename = "files/ZipFileServer-%s.zip" %(time.strftime("%H-%M-%S-%d-%m"))            app.status('Zipping files')            with zipfile.ZipFile(filename,"a") as data["zip"]:                for file in data["files"]:                    data["zip"].write(file)                app.status('Sending files')                            with open(filename, "rb") as file:                if data["act_as"] == "server":                    data["connection"].sendfile(file)                else:                    data["socket"].sendfile(file)                app.status('Files are sent')                        else:            print("File not found / Odd behaviour")                    def gui_manager(self):        while True:            if data["state"] == "Connected":                self.oldstate = data["state"]                selected_files_size = 0                app.select_button.grid(row = 5, column  = 1)                app.file_path_listbox.grid(row = 4, column  = 1, columnspan = 2)                app.send_button.grid(row = 5, column = 2)            if data["update_file_listbox"]:                data["update_file_listbox"] = False                                app.file_path_listbox.delete(0,tk.END)                selected_files_size = 0                selection = app.file_path_listbox.curselection()                for file in data["files"]:                    file_path = os.path.join(PATH, file)                    if file[-3:len(file)] not in ["lnk","url","ini"]:                        if os.path.isfile(os.path.join(PATH, file)):                             size = Helper.stringify_size(os.path.getsize(file))                            app.file_path_listbox.insert(tk.END,"%s (%s)" %(file, size))                            app.file_path_listbox.config(height = max(app.file_path_listbox.size(),10))                    size = os.path.getsize(file)                    selected_files_size += size                app.status("Total size: %s" %(Helper.stringify_size(selected_files_size)))            class Application(tk.Frame):    def __init__(self, master=None):        super().__init__(master)        self.pack()        self.winfo_toplevel().title("FileServer (%s)" %Helper.get_version())                self.ip_label = tk.Label(self)        self.ip_label["text"] = "IP:"                self.ip_entry = tk.Entry(self, width = 40)        self.ip_entry.insert(0,IP)                self.act_as_label = tk.Label(self)        self.act_as_label["text"] = "Act as"                self.act_server_button = tk.Button(self)        self.act_server_button["text"] = "Server"        self.act_server_button["command"] = self.act_server                self.act_client_button = tk.Button(self)        self.act_client_button["text"] = "Client"        self.act_client_button["command"] = self.act_client        self.socket_ip_label = tk.Label(self)        self.socket_ip_label["text"] = "IP:"        self.socket_port_label = tk.Label(self)        self.socket_port_label["text"] = "Port:"        self.server_socket_ip_label = tk.Label(self)        self.server_socket_ip_label["text"] = "?.?.?.?"        self.client_socket_ip_label = tk.Label(self)        self.client_socket_ip_label["text"] = "?.?.?.?"        self.server_socket_port_label = tk.Label(self)        self.server_socket_port_label["text"] = "(?????)"        self.client_socket_port_label = tk.Label(self)        self.client_socket_port_label["text"] = "(?????)"                self.file_path_listbox = tk.Listbox(self,selectmode=tk.EXTENDED ,width=40)        self.select_button = tk.Button(self)        self.select_button["text"] = "Select files"        self.select_button["command"] = self.select_files        self.send_button = tk.Button(self)        self.send_button["text"] = "Send"        self.send_button["command"] = self.send                self.status_bar = tk.Label(self, text="", bd=1, relief=tk.SUNKEN, anchor=tk.W, )                 self.ip_label.grid(row = 0, column  = 0)        self.ip_entry.grid(row = 0, column  = 1, columnspan = 2)                self.act_as_label.grid(row = 1, column  = 0)        self.act_server_button.grid(row = 1, column  = 1)        self.act_client_button.grid(row = 1, column  = 2)        self.socket_ip_label.grid(row = 2, column  = 0)        self.socket_port_label.grid(row = 3, column  = 0)        self.server_socket_ip_label.grid(row = 2, column  = 1)        self.client_socket_ip_label.grid(row = 2, column  = 2)        self.server_socket_port_label.grid(row = 3, column  = 1)        self.client_socket_port_label.grid(row = 3, column  = 2)        self.status_bar.grid(row = 6, columnspan = 3, sticky='we')        self.grid(padx=0, pady=0)        self.status('Version: %s' %Helper.get_version())            def act_server(self):        QThread("server_init")                    def act_client(self):        QThread("client_init")    def send(self):        QThread("send")            def select_files(self):        data["files"] = list(filedialog.askopenfilename(initialdir = r"C:\Users\Quinten\Desktop",multiple = True))        data["update_file_listbox"] = True            def status(self, text):        self.status_bar["text"] = text    filetypes = [(1,"B"), (1_024,"kB"), (1_048_576,"MB"), (1_073_741_824,"GB"), (1_099_511_627_776,"TB")]class Helper():    def stringify_size(size):        for sizetype in filetypes:            if size < sizetype[0] * 1000:                size = str(int(size / sizetype[0])) + sizetype[1]                return size        return "NaN"                def unstringify_size(name):        index = len(name)        for letter in name[::-1]:            index -= 1            if letter == '(':                return name[:index-1]        raise Exception("Value given to Helper.unstringify_size is invalid! It has no '('")    def get_version():        v = str(V).rjust(4,'0')        return v[0] + '.' + v[1] + '.'+ v[2] + '.' + v[3]    def autostart():        ip = [ip for ip in socket.gethostbyname_ex(socket.gethostname())[2] if not ip.startswith("127.")][:1][0]        if ip == '192.168.1.1':            QThread("server_init")            print("[AUTOSTART] Server detected")        elif ip == '192.168.1.2':            QThread("client_init")            print("[AUTOSTART] Client detected")print("Version:", Helper.get_version())QThread("GUI")root = tk.Tk()app = Application(master=root)if AUTOSTART:    Helper.autostart()root.minsize(220,100)app.mainloop()